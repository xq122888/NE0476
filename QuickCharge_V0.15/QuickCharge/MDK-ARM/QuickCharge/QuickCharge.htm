<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [QuickCharge\QuickCharge.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image QuickCharge\QuickCharge.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu May 05 15:09:26 2022
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBPD_StateSelectCap_Entry &rArr; USBPD_Send_Request &rArr; USBPD_PHY_EncodeMessage
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[40]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[40]">ADC1_2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5d]">ADC3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[68]">ADC4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[28]">BusFault_Handler</a> from stm32f3xx_it.o(i.BusFault_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[43]">CAN_RX1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[44]">CAN_SCE_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[69]">COMP1_2_3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6a]">COMP4_5_6_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6b]">COMP7_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[39]">DMA1_Channel1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[63]">DMA2_Channel1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[64]">DMA2_Channel2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[65]">DMA2_Channel3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[66]">DMA2_Channel4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[67]">DMA2_Channel5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2b]">DebugMon_Handler</a> from stm32f3xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[34]">EXTI0_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[56]">EXTI15_10_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[35]">EXTI1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[36]">EXTI2_TSC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[37]">EXTI3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[38]">EXTI4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[45]">EXTI9_5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[32]">FLASH_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6f]">FPU_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[26]">HardFault_Handler</a> from stm32f3xx_it.o(i.HardFault_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4e]">I2C1_ER_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4d]">I2C1_EV_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[50]">I2C2_ER_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4f]">I2C2_EV_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[27]">MemManage_Handler</a> from stm32f3xx_it.o(i.MemManage_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[25]">NMI_Handler</a> from stm32f3xx_it.o(i.NMI_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2f]">PVD_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2c]">PendSV_Handler</a> from stm32f3xx_it.o(i.PendSV_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[33]">RCC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[57]">RTC_Alarm_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[31]">RTC_WKUP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[24]">Reset_Handler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[51]">SPI1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[52]">SPI2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5e]">SPI3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2a]">SVC_Handler</a> from stm32f3xx_it.o(i.SVC_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2d]">SysTick_Handler</a> from stm32f3xx_it.o(i.SysTick_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f303xc.o(.text)
 <LI><a href="#[30]">TAMP_STAMP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[46]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[49]">TIM1_CC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[48]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[47]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4a]">TIM2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4b]">TIM3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4c]">TIM4_IRQHandler</a> from stm32f3xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[61]">TIM6_DAC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[62]">TIM7_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[59]">TIM8_BRK_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5c]">TIM8_CC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5b]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5a]">TIM8_UP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5f]">UART4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[60]">UART5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[53]">USART1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[54]">USART2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[55]">USART3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5]">USBPD_StateDiscovery_Action</a> from usbpd_sm.o(i.USBPD_StateDiscovery_Action) referenced 2 times from main.o(.data)
 <LI><a href="#[3]">USBPD_StateDiscovery_Entry</a> from usbpd_sm.o(i.USBPD_StateDiscovery_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[4]">USBPD_StateDiscovery_Exit</a> from usbpd_sm.o(i.USBPD_StateDiscovery_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[17]">USBPD_StateGetSrcCap_Aciton</a> from usbpd_sm.o(i.USBPD_StateGetSrcCap_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[15]">USBPD_StateGetSrcCap_Entry</a> from usbpd_sm.o(i.USBPD_StateGetSrcCap_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[16]">USBPD_StateGetSrcCap_Exit</a> from usbpd_sm.o(i.USBPD_StateGetSrcCap_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[14]">USBPD_StateGiveSinkCap_Aciton</a> from usbpd_sm.o(i.USBPD_StateGiveSinkCap_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[12]">USBPD_StateGiveSinkCap_Entry</a> from usbpd_sm.o(i.USBPD_StateGiveSinkCap_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[13]">USBPD_StateGiveSinkCap_Exit</a> from usbpd_sm.o(i.USBPD_StateGiveSinkCap_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[1a]">USBPD_StateHardReset_Aciton</a> from usbpd_sm.o(i.USBPD_StateHardReset_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[18]">USBPD_StateHardReset_Entry</a> from usbpd_sm.o(i.USBPD_StateHardReset_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[19]">USBPD_StateHardReset_Exit</a> from usbpd_sm.o(i.USBPD_StateHardReset_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[23]">USBPD_StateNotSupported_Aciton</a> from usbpd_sm.o(i.USBPD_StateNotSupported_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[21]">USBPD_StateNotSupported_Entry</a> from usbpd_sm.o(i.USBPD_StateNotSupported_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[22]">USBPD_StateNotSupported_Exit</a> from usbpd_sm.o(i.USBPD_StateNotSupported_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[11]">USBPD_StateReady_Aciton</a> from usbpd_sm.o(i.USBPD_StateReady_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[f]">USBPD_StateReady_Entry</a> from usbpd_sm.o(i.USBPD_StateReady_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[10]">USBPD_StateReady_Exit</a> from usbpd_sm.o(i.USBPD_StateReady_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[b]">USBPD_StateSelectCap_Aciton</a> from usbpd_sm.o(i.USBPD_StateSelectCap_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[9]">USBPD_StateSelectCap_Entry</a> from usbpd_sm.o(i.USBPD_StateSelectCap_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[a]">USBPD_StateSelectCap_Exit</a> from usbpd_sm.o(i.USBPD_StateSelectCap_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[20]">USBPD_StateSoftReset_Aciton</a> from usbpd_sm.o(i.USBPD_StateSoftReset_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[1e]">USBPD_StateSoftReset_Entry</a> from usbpd_sm.o(i.USBPD_StateSoftReset_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[1f]">USBPD_StateSoftReset_Exit</a> from usbpd_sm.o(i.USBPD_StateSoftReset_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[2]">USBPD_StateStartup_Aciton</a> from usbpd_sm.o(i.USBPD_StateStartup_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[0]">USBPD_StateStartup_Entry</a> from usbpd_sm.o(i.USBPD_StateStartup_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[1]">USBPD_StateStartup_Exit</a> from usbpd_sm.o(i.USBPD_StateStartup_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[1d]">USBPD_StateTransDefault_Aciton</a> from usbpd_sm.o(i.USBPD_StateTransDefault_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[1b]">USBPD_StateTransDefault_Entry</a> from usbpd_sm.o(i.USBPD_StateTransDefault_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[1c]">USBPD_StateTransDefault_Exit</a> from usbpd_sm.o(i.USBPD_StateTransDefault_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[e]">USBPD_StateTransSink_Aciton</a> from usbpd_sm.o(i.USBPD_StateTransSink_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[c]">USBPD_StateTransSink_Entry</a> from usbpd_sm.o(i.USBPD_StateTransSink_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[d]">USBPD_StateTransSink_Exit</a> from usbpd_sm.o(i.USBPD_StateTransSink_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[8]">USBPD_StateWaitCap_Aciton</a> from usbpd_sm.o(i.USBPD_StateWaitCap_Aciton) referenced 2 times from main.o(.data)
 <LI><a href="#[6]">USBPD_StateWaitCap_Entry</a> from usbpd_sm.o(i.USBPD_StateWaitCap_Entry) referenced 2 times from main.o(.data)
 <LI><a href="#[7]">USBPD_StateWaitCap_Exit</a> from usbpd_sm.o(i.USBPD_StateWaitCap_Exit) referenced 2 times from main.o(.data)
 <LI><a href="#[58]">USBWakeUp_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6e]">USBWakeUp_RMP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[41]">USB_HP_CAN_TX_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6c]">USB_HP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[42]">USB_LP_CAN_RX0_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6d]">USB_LP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[29]">UsageFault_Handler</a> from stm32f3xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2e]">WWDG_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[72]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f303xc.o(.text)
 <LI><a href="#[70]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[73]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[100]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[101]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[102]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[104]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[105]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USBWakeUp_RMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DPM_FindVoltageIndex</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, usbpd_dpm_user.o(i.DPM_FindVoltageIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DPM_FindVoltageIndex &rArr; USBPD_DPM_SNK_EvaluateMatchWithSRCFixedPDO
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DPM_SNK_EvaluateMatchWithSRCFixedPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Entry
</UL>

<P><STRONG><a name="[f9]"></a>DPM_SNK_BuildRDOfromSelectedFixedPDO</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, usbpd_dpm_user.o(i.DPM_SNK_BuildRDOfromSelectedFixedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DPM_SNK_BuildRDOfromSelectedFixedPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Entry
</UL>

<P><STRONG><a name="[2b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7b]"></a>GetAverageValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, measure.o(i.GetAverageValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetAverageValue &rArr; GetInstantValue &rArr; GetInstantVBUSCurrent &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>GetInstantCC1Voltage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, measure.o(i.GetInstantCC1Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetInstantCC1Voltage &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>

<P><STRONG><a name="[7f]"></a>GetInstantCC2Voltage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, measure.o(i.GetInstantCC2Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetInstantCC2Voltage &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>

<P><STRONG><a name="[80]"></a>GetInstantDNVoltage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, measure.o(i.GetInstantDNVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetInstantDNVoltage &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>

<P><STRONG><a name="[81]"></a>GetInstantDPVoltage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, measure.o(i.GetInstantDPVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetInstantDPVoltage &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>

<P><STRONG><a name="[82]"></a>GetInstantVBUSCurrent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, measure.o(i.GetInstantVBUSCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetInstantVBUSCurrent &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>

<P><STRONG><a name="[83]"></a>GetInstantVBUSVoltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, measure.o(i.GetInstantVBUSVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateDiscovery_Action
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantValue
</UL>

<P><STRONG><a name="[7c]"></a>GetInstantValue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, measure.o(i.GetInstantValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetInstantValue &rArr; GetInstantVBUSCurrent &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantVBUSVoltage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantVBUSCurrent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantDPVoltage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantDNVoltage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantCC2Voltage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantCC1Voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverageValue
</UL>

<P><STRONG><a name="[84]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f3xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
</UL>

<P><STRONG><a name="[90]"></a>HAL_GPIO_Init</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[85]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer2
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer2Expired
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[d3]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[86]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f3xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f3xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[89]"></a>HAL_MspInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[8b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[87]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f3xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32f3xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[26]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>HwAdcSample</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, measure.o(i.HwAdcSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StopConversion
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_EOC
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_ADRDY
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantVBUSCurrent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantDPVoltage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantDNVoltage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantCC2Voltage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantCC1Voltage
</UL>

<P><STRONG><a name="[d2]"></a>IncMsCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.IncMsCount))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a6]"></a>IsTimer1Expired</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.IsTimer1Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsTimer1Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Aciton
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Aciton
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
</UL>

<P><STRONG><a name="[a7]"></a>IsTimer2Expired</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.IsTimer2Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsTimer2Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
</UL>

<P><STRONG><a name="[b2]"></a>LL_ADC_CommonInit</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, stm32f3xx_ll_adc.o(i.LL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[ab]"></a>LL_ADC_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f3xx_ll_adc.o(i.LL_ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[ac]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f3xx_ll_adc.o(i.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[b4]"></a>LL_COMP_Init</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32f3xx_ll_comp.o(i.LL_COMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_COMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP1_Init
</UL>

<P><STRONG><a name="[b9]"></a>LL_DAC_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f3xx_ll_dac.o(i.LL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[c0]"></a>LL_EXTI_Init</STRONG> (Thumb, 408 bytes, Stack size 12 bytes, stm32f3xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>LL_GPIO_Init</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32f3xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[d5]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d7]"></a>LL_TIM_IC_CaptureCallback</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, usbpd_phy_decode.o(i.LL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>LL_TIM_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f3xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[27]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>QuickChargeDetection</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, usbqc.o(i.QuickChargeDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QuickChargeDetection &rArr; GetAverageValue &rArr; GetInstantValue &rArr; GetInstantVBUSCurrent &rArr; HwAdcSample &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverageValue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseUsbData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>ResetQuickChargeFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbqc.o(i.ResetQuickChargeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>RestartTimer1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.RestartTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RestartTimer1
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
</UL>

<P><STRONG><a name="[2a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>StartTimer1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.StartTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartTimer1
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Entry
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Entry
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Entry
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Entry
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Entry
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Entry
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Entry
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Entry
</UL>

<P><STRONG><a name="[d1]"></a>StartTimer2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.StartTimer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartTimer2
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
</UL>

<P><STRONG><a name="[f7]"></a>StopAllTimers</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.StopAllTimers))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Exit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Exit
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateStartup_Exit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Exit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Exit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Exit
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Exit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Exit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Exit
</UL>

<P><STRONG><a name="[f8]"></a>StopTimer1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.StopTimer1))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
</UL>

<P><STRONG><a name="[2d]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncMsCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>SystemClock_Config</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetADCClockSource
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f3xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[93]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[98]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[7a]"></a>USBPD_DPM_SNK_EvaluateMatchWithSRCFixedPDO</STRONG> (Thumb, 134 bytes, Stack size 44 bytes, usbpd_dpm_user.o(i.USBPD_DPM_SNK_EvaluateMatchWithSRCFixedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBPD_DPM_SNK_EvaluateMatchWithSRCFixedPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_FindVoltageIndex
</UL>

<P><STRONG><a name="[fb]"></a>USBPD_DisableDecoder</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbpd_phy_decode.o(i.USBPD_DisableDecoder))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateStartup_Aciton
</UL>

<P><STRONG><a name="[f4]"></a>USBPD_EnableDecoder</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbpd_phy_decode.o(i.USBPD_EnableDecoder))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Aciton
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Aciton
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateDiscovery_Action
</UL>

<P><STRONG><a name="[f5]"></a>USBPD_GetMessage</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, usbpd_msgrcv.o(i.USBPD_GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBPD_GetMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Aciton
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Aciton
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
</UL>

<P><STRONG><a name="[f6]"></a>USBPD_GetReceivedMsgType</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usbpd_msgrcv.o(i.USBPD_GetReceivedMsgType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_GetReceivedMsgType
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Aciton
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Aciton
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
</UL>

<P><STRONG><a name="[ed]"></a>USBPD_IncreaseTransMsgID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbpd_prl.o(i.USBPD_IncreaseTransMsgID))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
</UL>

<P><STRONG><a name="[e9]"></a>USBPD_PHY_4B5BEncode</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usbpd_phy_4b5b.o(i.USBPD_PHY_4B5BEncode))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EncodeMessage
</UL>

<P><STRONG><a name="[e6]"></a>USBPD_PHY_5B4BDecode</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, usbpd_phy_4b5b.o(i.USBPD_PHY_5B4BDecode))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMsgByte
</UL>

<P><STRONG><a name="[e4]"></a>USBPD_PHY_CRC32Check</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, usbpd_phy_crc32.o(i.USBPD_PHY_CRC32Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBPD_PHY_CRC32Check
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[d8]"></a>USBPD_PHY_CRC32Generate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbpd_phy_crc32.o(i.USBPD_PHY_CRC32Generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_PHY_CRC32Generate &rArr; CRC_Handle_8
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetMessage
</UL>

<P><STRONG><a name="[e5]"></a>USBPD_PHY_Cov5BCodeTo5BValue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbpd_phy_4b5b.o(i.USBPD_PHY_Cov5BCodeTo5BValue))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SOPDetect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EOPDetect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMsgByte
</UL>

<P><STRONG><a name="[e8]"></a>USBPD_PHY_Cov5BValueTo5BCode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbpd_phy_4b5b.o(i.USBPD_PHY_Cov5BValueTo5BCode))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EncodeMessage
</UL>

<P><STRONG><a name="[da]"></a>USBPD_PHY_DecodeMessage</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, usbpd_phy_decode.o(i.USBPD_PHY_DecodeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SOPDetect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_PreambleDetect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_GapClassify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EOPDetect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMsgByte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_BitRecognize
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_CRC32Check
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Aciton
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Aciton
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Aciton
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Aciton
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Aciton
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Aciton
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
</UL>

<P><STRONG><a name="[e7]"></a>USBPD_PHY_EncodeMessage</STRONG> (Thumb, 364 bytes, Stack size 88 bytes, usbpd_phy_encode.o(i.USBPD_PHY_EncodeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Cov5BValueTo5BCode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_4B5BEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_HardReset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
</UL>

<P><STRONG><a name="[ea]"></a>USBPD_PHY_SendBit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbpd_phy_encode.o(i.USBPD_PHY_SendBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_PHY_SendBit &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_HardReset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
</UL>

<P><STRONG><a name="[ec]"></a>USBPD_PHY_SetMessage</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbpd_phy_encode.o(i.USBPD_PHY_SetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBPD_PHY_SetMessage &rArr; USBPD_PHY_CRC32Generate &rArr; CRC_Handle_8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_CRC32Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_HardReset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
</UL>

<P><STRONG><a name="[fa]"></a>USBPD_ProtocolLayerReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbpd_prl.o(i.USBPD_ProtocolLayerReset))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateStartup_Aciton
</UL>

<P><STRONG><a name="[e0]"></a>USBPD_Send_ControlMessage</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbpd_msgtrans.o(i.USBPD_Send_ControlMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SendBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EncodeMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_IncreaseTransMsgID
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_SetMessage_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateWaitCap_Aciton
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateTransSink_Aciton
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSoftReset_Entry
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateReady_Aciton
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateNotSupported_Entry
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGetSrcCap_Aciton
</UL>

<P><STRONG><a name="[ef]"></a>USBPD_Send_HardReset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbpd_msgtrans.o(i.USBPD_Send_HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBPD_Send_HardReset &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SendBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EncodeMessage
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_SetMessage_HardReset
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateHardReset_Entry
</UL>

<P><STRONG><a name="[f1]"></a>USBPD_Send_Request</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbpd_msgtrans.o(i.USBPD_Send_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBPD_Send_Request &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SendBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EncodeMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_IncreaseTransMsgID
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_SetMessage_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Entry
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateSelectCap_Aciton
</UL>

<P><STRONG><a name="[f3]"></a>USBPD_Send_SinkCap</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbpd_msgtrans.o(i.USBPD_Send_SinkCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBPD_Send_SinkCap &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SetMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SendBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_EncodeMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_IncreaseTransMsgID
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_SetMessage_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_StateGiveSinkCap_Aciton
</UL>

<P><STRONG><a name="[ee]"></a>USBPD_SetMessage_Control</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbpd_msgtrans.o(i.USBPD_SetMessage_Control))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
</UL>

<P><STRONG><a name="[f2]"></a>USBPD_SetMessage_Data</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, usbpd_msgtrans.o(i.USBPD_SetMessage_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBPD_SetMessage_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
</UL>

<P><STRONG><a name="[f0]"></a>USBPD_SetMessage_HardReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbpd_msgtrans.o(i.USBPD_SetMessage_HardReset))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_HardReset
</UL>

<P><STRONG><a name="[5]"></a>USBPD_StateDiscovery_Action</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateDiscovery_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateDiscovery_Action
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInstantVBUSVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBPD_StateDiscovery_Entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateDiscovery_Entry))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBPD_StateDiscovery_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateDiscovery_Exit))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBPD_StateGetSrcCap_Aciton</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateGetSrcCap_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateGetSrcCap_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBPD_StateGetSrcCap_Entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateGetSrcCap_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBPD_StateGetSrcCap_Entry &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBPD_StateGetSrcCap_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateGetSrcCap_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateGetSrcCap_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBPD_StateGiveSinkCap_Aciton</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateGiveSinkCap_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateGiveSinkCap_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBPD_StateGiveSinkCap_Entry</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateGiveSinkCap_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBPD_StateGiveSinkCap_Entry &rArr; USBPD_Send_SinkCap &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_SinkCap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBPD_StateGiveSinkCap_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateGiveSinkCap_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateGiveSinkCap_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBPD_StateHardReset_Aciton</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateHardReset_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateHardReset_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBPD_StateHardReset_Entry</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateHardReset_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBPD_StateHardReset_Entry &rArr; USBPD_Send_HardReset &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_HardReset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBPD_StateHardReset_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateHardReset_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateHardReset_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBPD_StateNotSupported_Aciton</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateNotSupported_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateNotSupported_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBPD_StateNotSupported_Entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateNotSupported_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBPD_StateNotSupported_Entry &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBPD_StateNotSupported_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateNotSupported_Exit))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBPD_StateReady_Aciton</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateReady_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateReady_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBPD_StateReady_Entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateReady_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_StateReady_Entry &rArr; StartTimer1
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBPD_StateReady_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateReady_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateReady_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBPD_StateSelectCap_Aciton</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateSelectCap_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateSelectCap_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer2Expired
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBPD_StateSelectCap_Entry</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, usbpd_sm.o(i.USBPD_StateSelectCap_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBPD_StateSelectCap_Entry &rArr; USBPD_Send_Request &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_Request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_SNK_BuildRDOfromSelectedFixedPDO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPM_FindVoltageIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBPD_StateSelectCap_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateSelectCap_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateSelectCap_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBPD_StateSoftReset_Aciton</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateSoftReset_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateSoftReset_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartTimer1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBPD_StateSoftReset_Entry</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateSoftReset_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBPD_StateSoftReset_Entry &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBPD_StateSoftReset_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateSoftReset_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateSoftReset_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBPD_StateStartup_Aciton</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateStartup_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateStartup_Aciton
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_ProtocolLayerReset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_DisableDecoder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBPD_StateStartup_Entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateStartup_Entry))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBPD_StateStartup_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateStartup_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateStartup_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBPD_StateTransDefault_Aciton</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateTransDefault_Aciton))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBPD_StateTransDefault_Entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateTransDefault_Entry))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBPD_StateTransDefault_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbpd_sm.o(i.USBPD_StateTransDefault_Exit))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBPD_StateTransSink_Aciton</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateTransSink_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateTransSink_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBPD_StateTransSink_Entry</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateTransSink_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_StateTransSink_Entry &rArr; StartTimer1
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBPD_StateTransSink_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateTransSink_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateTransSink_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBPD_StateWaitCap_Aciton</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateWaitCap_Aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBPD_StateWaitCap_Aciton &rArr; USBPD_PHY_DecodeMessage &rArr; USBPD_Send_ControlMessage &rArr; USBPD_PHY_EncodeMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_Send_ControlMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetReceivedMsgType
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_GetMessage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_EnableDecoder
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimer1Expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBPD_StateWaitCap_Entry</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usbpd_sm.o(i.USBPD_StateWaitCap_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBPD_StateWaitCap_Entry &rArr; StartTimer1
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBPD_StateWaitCap_Exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbpd_sm.o(i.USBPD_StateWaitCap_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBPD_StateWaitCap_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[110]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverageValue
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetQuickChargeFlag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d9]"></a>CRC_Handle_8</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usbpd_phy_crc32.o(i.CRC_Handle_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Handle_8
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_CRC32Generate
</UL>

<P><STRONG><a name="[dd]"></a>USBPD_PHY_BitRecognize</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, usbpd_phy_decode.o(i.USBPD_PHY_BitRecognize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBPD_PHY_BitRecognize
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[e1]"></a>USBPD_PHY_DecodeMsgByte</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, usbpd_phy_decode.o(i.USBPD_PHY_DecodeMsgByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBPD_PHY_DecodeMsgByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Cov5BCodeTo5BValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_5B4BDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[e3]"></a>USBPD_PHY_EOPDetect</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbpd_phy_decode.o(i.USBPD_PHY_EOPDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PHY_EOPDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Cov5BCodeTo5BValue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[dc]"></a>USBPD_PHY_GapClassify</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usbpd_phy_decode.o(i.USBPD_PHY_GapClassify))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[de]"></a>USBPD_PHY_PreambleDetect</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, usbpd_phy_decode.o(i.USBPD_PHY_PreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBPD_PHY_PreambleDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[db]"></a>USBPD_PHY_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbpd_phy_decode.o(i.USBPD_PHY_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[df]"></a>USBPD_PHY_SOPDetect</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usbpd_phy_decode.o(i.USBPD_PHY_SOPDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBPD_PHY_SOPDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_Cov5BCodeTo5BValue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_DecodeMessage
</UL>

<P><STRONG><a name="[eb]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbpd_phy_encode.o(i.LL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBPD_PHY_SendBit
</UL>

<P><STRONG><a name="[cd]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbqc.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
</UL>

<P><STRONG><a name="[cc]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbqc.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
</UL>

<P><STRONG><a name="[cb]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbqc.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseUsbData
</UL>

<P><STRONG><a name="[ce]"></a>ReleaseUsbData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbqc.o(i.ReleaseUsbData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReleaseUsbData &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickChargeDetection
</UL>

<P><STRONG><a name="[a5]"></a>LL_ADC_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[9f]"></a>LL_ADC_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[a0]"></a>LL_ADC_IsActiveFlag_ADRDY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_IsActiveFlag_ADRDY))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[a2]"></a>LL_ADC_IsActiveFlag_EOC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_IsActiveFlag_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[a4]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[9e]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, measure.o(i.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[a1]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_REG_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[a3]"></a>LL_ADC_REG_StopConversion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, measure.o(i.LL_ADC_REG_StopConversion))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwAdcSample
</UL>

<P><STRONG><a name="[fe]"></a>GetEvent</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.GetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.LL_ADC_EnableInternalRegulator))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[ae]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[af]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[b0]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.LL_ADC_SetChannelSingleDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[a9]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_COMP1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[b8]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[ba]"></a>LL_DAC_DisableTrigger</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_DAC_DisableTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DAC_DisableTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[bc]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[fc]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[be]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d6]"></a>LL_RCC_SetADCClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetADCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>LL_SYSCFG_SetEXTISource</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.LL_SYSCFG_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[c3]"></a>LL_TIM_IC_SetActiveInput</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, main.o(i.LL_TIM_IC_SetActiveInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_IC_SetActiveInput
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c5]"></a>LL_TIM_IC_SetFilter</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, main.o(i.LL_TIM_IC_SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_IC_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c6]"></a>LL_TIM_IC_SetPolarity</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.LL_TIM_IC_SetPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_IC_SetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c4]"></a>LL_TIM_IC_SetPrescaler</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, main.o(i.LL_TIM_IC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_IC_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[a8]"></a>MX_ADC2_Init</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, main.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC2_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>MX_ADC3_Init</STRONG> (Thumb, 234 bytes, Stack size 88 bytes, main.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_ADC3_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>MX_COMP1_Init</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, main.o(i.MX_COMP1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_COMP1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_COMP_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>MX_COMP2_Init</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, main.o(i.MX_COMP2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_COMP2_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_COMP_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>MX_CRC_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_CRC_Init &rArr; LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>MX_DAC_Init</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, main.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_DAC_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DAC_DisableTrigger
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DAC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>MX_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_SetEXTISource
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>MX_TIM3_Init</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TIM3_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetPrescaler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetPolarity
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetFilter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetActiveInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>MX_TIM4_Init</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[94]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[96]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[99]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f3xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[9a]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, stm32f3xx_hal_tim.o(i.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[9b]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f3xx_hal_tim.o(i.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
